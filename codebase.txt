├── __init__.py
  Content:


├── __pycache__ [Ignored]
├── admin.py
  Content:
from django.contrib import admin
from .models import Project


# Register your models here.
@admin.register(Project)
class ProjectAdmin(admin.ModelAdmin):
    list_display = ["name", "project_type", "created_at", "is_active"]
    list_filter = ["project_type", "is_active"]
    search_fields = ["name"]
    ordering = ["-created_at"]


├── apps.py
  Content:
from django.apps import AppConfig


class ProjectManagerConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'project_manager'


├── ar_data.py
  Content:
list_ar_alpha = [
    "ء",
    "آ",
    "أ",
    "ؤ",
    "إ",
    "ئ",
    "ا",
    "ب",
    "ة",
    "ت",
    "ث",
    "ج",
    "ح",
    "خ",
    "د",
    "ذ",
    "ر",
    "ز",
    "س",
    "ش",
    "ص",
    "ض",
    "ط",
    "ظ",
    "ع",
    "غ",
    "ف",
    "ق",
    "ك",
    "ل",
    "م",
    "ن",
    "ه",
    "و",
    "ى",
    "ي",
]

set_ar_dia = set(
    """
ًٌٍَُِّْ
""".strip()
)


├── forms.py
  Content:
from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Submit, Field, ButtonHolder
from .models import Project, Document
from .utils import get_file_size_kb


class ProjectForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = "post"
        self.helper.layout = Layout(
            Field("name", css_class="form-input"),
            Field("project_type", css_class="form-select"),
            ButtonHolder(
                Submit("submit", "Create Project", css_class="pm-btn pm-btn-primary")
            ),
        )

    class Meta:
        model = Project
        fields = ["name", "project_type"]
        help_texts = {
            "name": "Choose a descriptive name for your project",
            "project_type": "Select whether this is a training or diacritization project",
        }


class DocumentUploadForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = "post"
        self.helper.form_enctype = "multipart/form-data"
        self.helper.layout = Layout(
            Field("name", css_class="form-input"),
            Field("file"),
            ButtonHolder(
                Submit("submit", "Upload Document", css_class="pm-btn pm-btn-primary")
            ),
        )

    class Meta:
        model = Document
        fields = ["name", "file"]

    def clean_file(self):
        file = self.cleaned_data.get("file")
        if file:
            # Check file size
            file_size = get_file_size_kb(file)
            if file_size > 10240:  # 10MB limit
                raise forms.ValidationError("File size must be less than 10MB.")

            # Check file extension
            if not file.name.endswith(".txt"):
                raise forms.ValidationError("Only .txt files are allowed.")

            return file


└── migrations/
  ├── 0001_initial.py
    Content:
# Generated by Django 5.0.6 on 2025-01-15 18:15

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('project_type', models.CharField(choices=[('train', 'Training'), ('dicr', 'Diacritization')], default='dicr', max_length=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('file', models.FileField(upload_to='documents/')),
                ('file_size', models.IntegerField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='project_manager.project')),
            ],
        ),
        migrations.CreateModel(
            name='Verse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('position', models.IntegerField()),
                ('status', models.CharField(choices=[('NEW', 'New'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('REVIEWED', 'Reviewed')], default='NEW', max_length=20)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verses', to='project_manager.document')),
            ],
        ),
    ]


  ├── 0002_alter_verse_options.py
    Content:
# Generated by Django 5.0.6 on 2025-01-17 06:54

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('project_manager', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='verse',
            options={'ordering': ['position']},
        ),
    ]


  ├── 0003_alter_verse_options.py
    Content:
# Generated by Django 5.0.6 on 2025-01-17 13:36

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('project_manager', '0002_alter_verse_options'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='verse',
            options={},
        ),
    ]


  ├── __init__.py
    Content:


  ├── __pycache__ [Ignored]
├── models.py
  Content:
from django.db import models


class Project(models.Model):
    class ProjectType(models.TextChoices):
        TRAINING = "train", "Training"
        DIACRITIZATION = "dicr", "Diacritization"

    name = models.CharField(max_length=200)
    project_type = models.CharField(
        max_length=5, choices=ProjectType.choices, default=ProjectType.DIACRITIZATION
    )
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)


class Document(models.Model):
    project = models.ForeignKey(
        Project, on_delete=models.CASCADE, related_name="documents"
    )
    name = models.CharField(max_length=200)
    file = models.FileField(upload_to="documents/")
    file_size = models.IntegerField(null=True, blank=True)  # Size in KB
    uploaded_at = models.DateTimeField(auto_now_add=True)


class Verse(models.Model):
    class Status(models.TextChoices):
        NEW = "NEW", "New"
        IN_PROGRESS = "IN_PROGRESS", "In Progress"
        COMPLETED = "COMPLETED", "Completed"
        REVIEWED = "REVIEWED", "Reviewed"

    document = models.ForeignKey(
        Document, on_delete=models.CASCADE, related_name="verses"
    )
    content = models.TextField()
    position = models.IntegerField()
    status = models.CharField(max_length=20, choices=Status.choices, default=Status.NEW)


└── static/
  └── project_manager/
    └── css/
      ├── project_manager.css
        Content:
/* Custom Properties */
:root {
  --font-arabic: 'Amiri', serif;
  --font-primary: 'Rubik', -apple-system, BlinkMacSystemFont, sans-serif;
}

/* Layout customization */
.pm-container {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* Typography */
body {
  font-family: var(--font-primary);
}

/* Arabic text specific styles */
.verse-content {
  font-family: var(--font-arabic);
  font-size: 1.5rem;
  line-height: 2;
  text-align: right;
  direction: rtl;
  padding: 2rem;
  background: white;
  border-radius: 0.5rem;
  margin-bottom: 1.5rem;
}

/* Status badges - extending Bootstrap's badge component */
.status-badge {
  padding: 0.5rem 1rem;
  border-radius: 9999px;
  font-weight: 500;
  font-size: 0.875rem;
}

.status-new { 
  background-color: var(--bs-gray-200);
  color: var(--bs-gray-700);
}

.status-progress {
  background-color: var(--bs-warning);
  color: var(--bs-dark);
}

.status-completed {
  background-color: var(--bs-success);
  color: white;
}

.status-reviewed {
  background-color: var(--bs-primary);
  color: white;
}

/* Document list customization */
.document-item {
  padding: 1rem;
  background: white;
  border-radius: 0.5rem;
  margin-bottom: 1rem;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

/* Meta information text */
.meta-text {
  color: var(--bs-gray-600);
  font-size: 0.875rem;
}

/* RTL Support */
.rtl { 
  direction: rtl; 
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .document-item {
      flex-direction: column;
      text-align: center;
      gap: 1rem;
  }

  .pm-container {
      margin: 1rem auto;
  }
}

/* HTMX Loading States */
.htmx-indicator {
  opacity: 0;
  transition: opacity 200ms ease-in;
}

.htmx-request .htmx-indicator {
  opacity: 1
}

.htmx-request.htmx-indicator {
  opacity: 1
}

    └── images/
      ├── favicon.ico
        [Error processing file]

    └── js/
└── templates/
  └── project_manager/
    ├── base.html
      Content:
{% load static %}
{% load crispy_forms_tags %}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://unpkg.com/htmx.org@2.0.4"></script>
    <link rel="icon" href="{% static 'project_manager/images/favicon.ico' %}">

    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Amiri:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Cairo+Play:wght@200..1000&family=Rubik:ital,wght@0,300..900;1,300..900&family=Vazirmatn:wght@100..900&display=swap" rel="stylesheet" />

    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% static 'project_manager/css/project_manager.css' %}"/>

    {% block custom_stylesheets %}{% endblock %}

    <title>{% block page_title %}{% endblock %}</title>
  </head>
  <body>
    <!-- Message alerts -->
    {% if messages %}
    <div class="container mt-3">
        {% for message in messages %}
        <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        {% endfor %}
    </div>
    {% endif %}

    {% block content %}{% endblock %}
    
    <!-- Bootstrap 5 JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>

    ├── document_detail.html
      Content:
{% extends 'project_manager/base.html' %}
{% load static %}

{% block content %}
<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4 pb-3 border-bottom">
        <div>
            <h1 class="h2 mb-2">{{ document.name }}</h1>
            <p class="text-muted mb-0">
                Project: {{ document.project.name }} •
                Uploaded: {{ document.uploaded_at|date:"M d, Y" }}
            </p>
        </div>
        <a href="{% url 'project_manager:project_detail' document.project.pk %}" 
           class="btn btn-outline-primary">
            Back to Project
        </a>
    </div>

    <div class="verse-list">
        {% for verse in verses %}
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <div class="verse-content mb-3">
                        {{ verse.content }}
                    </div>
                    <div class="text-muted small mb-3">
                        Position: {{ verse.position }} •
                        Status: <span class="status-badge status-{{ verse.status|lower }}">
                            {{ verse.get_status_display }}
                        </span>
                    </div>
                    <div class="text-center">
                        <a href="{% url 'project_manager:verse_detail' verse.pk %}" 
                           class="btn btn-primary">
                            View Verse Status
                        </a>
                    </div>
                </div>
            </div>
        {% empty %}
            <div class="card text-center p-4">
                <div class="card-body">
                    <p class="mb-0">No verses found in this document.</p>
                </div>
            </div>
        {% endfor %}
    </div>
</div>
{% endblock %}

    ├── project_detail.html
      Content:
{% extends 'project_manager/base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4 pb-3 border-bottom">
        <div>
            <h1 class="h2 mb-2">{{ project.name }}</h1>
            <p class="text-muted mb-0">{{ project.get_project_type_display }}</p>
        </div>
        <a href="{% url 'project_manager:project_list' %}" class="btn btn-outline-primary">
            Back to Projects
        </a>
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h2 class="h4 mb-4">Upload New Document</h2>
            {% crispy form %}
        </div>
    </div>

    <section>
        <h2 class="h4 mb-4">Documents</h2>
        {% for document in documents %}
            <div class="card mb-3">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div>
                        <h3 class="h5 mb-2">{{ document.name }}</h3>
                        <p class="text-muted small mb-0">
                            Uploaded: {{ document.uploaded_at|date:"M d, Y" }}
                            {% if document.file_size %}
                                • {{ document.file_size|filesizeformat }}
                            {% endif %}
                        </p>
                    </div>
                    <div>
                        <a href="{% url 'project_manager:document_detail' document.pk %}" 
                           class="btn btn-primary">
                            View Verses
                        </a>
                    </div>
                </div>
            </div>
        {% empty %}
            <div class="card text-center p-4">
                <div class="card-body">
                    <p class="mb-1">No documents uploaded yet.</p>
                    <p class="text-muted">Use the form above to upload your first document.</p>
                </div>
            </div>
        {% endfor %}
    </section>
</div>
{% endblock %}

    ├── project_form.html
      Content:
{% extends 'project_manager/base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4 pb-3 border-bottom">
        <div>
            <h1 class="h2 mb-2">{{ title }}</h1>
            <p class="text-muted mb-0">Create a new project to manage your diacritization work</p>
        </div>
        <a href="{% url 'project_manager:project_list' %}" class="btn btn-outline-primary">
            Back to Projects
        </a>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <div class="mb-4">
                <h2 class="h4 mb-2">Project Details</h2>
                <p class="text-muted">Fill in the information below to create your project</p>
            </div>
            {% crispy form %}
        </div>
    </div>
</div>
{% endblock %}

    ├── project_list.html
      Content:
{% extends 'project_manager/base.html' %}
{% load static %}

{% block custom_stylesheets %}
<link rel="stylesheet" href="{% static 'project_manager/css/project_manager.css' %}"/>
{% endblock %}

{% block content %}
<div class="container py-4">
    <header class="d-flex justify-content-between align-items-center mb-4 pb-3 border-bottom">
        <h1 class="h2 mb-0">My Projects</h1>
        <a href="{% url 'project_manager:project_create' %}" class="btn btn-primary">
            Create New Project
        </a>
    </header>
    
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        {% for project in projects %}
            <div class="col">
                <article class="card h-100 shadow-sm" data-project-id="{{ project.pk }}">
                    <div class="card-body">
                        <h2 class="card-title h5 mb-3">{{ project.name }}</h2>
                        <div class="text-muted small mb-3">
                            <p class="mb-1">Type: {{ project.get_project_type_display }}</p>
                            <p class="mb-1">Created: {{ project.created_at|date:"M d, Y" }}</p>
                            {% with doc_count=project.documents.count %}
                                <p class="mb-0">{{ doc_count }} Document{{ doc_count|pluralize }}</p>
                            {% endwith %}
                        </div>
                        <a href="{% url 'project_manager:project_detail' project.pk %}" 
                           class="btn btn-outline-primary">
                            View Project
                        </a>
                    </div>
                </article>
            </div>
        {% empty %}
            <div class="col-12">
                <div class="card text-center p-4">
                    <div class="card-body">
                        <h2 class="h4 mb-3">Welcome!</h2>
                        <p class="mb-4">No projects yet. Start by creating your first project.</p>
                        <a href="{% url 'project_manager:project_create' %}" 
                           class="btn btn-primary">
                            Create First Project
                        </a>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
</div>
{% endblock %}

    ├── verse_detail.html
      Content:
{% extends 'project_manager/base.html' %}
{% load static %}

{% block content %}
<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4 pb-3 border-bottom">
        <div>
            <h1 class="h2 mb-2">Verse {{ verse.position }}</h1>
            <p class="text-muted mb-0">
                Project: {{ verse.document.project.name }} • 
                Document: {{ verse.document.name }}
            </p>
        </div>
        <a href="{% url 'project_manager:document_detail' verse.document.pk %}" 
           class="btn btn-outline-primary">
            Back to Document
        </a>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <div class="verse-content mb-4">
                {{ verse.content }}
            </div>
            
            <div class="text-center py-3 bg-light rounded">
                <h2 class="h4 mb-3">Verse Status</h2>
                <div class="d-flex flex-column align-items-center">
                    <div class="status-badge status-{{ verse.status|lower }} mb-2">
                        {{ verse.get_status_display }}
                    </div>
                    <p class="text-muted small mb-0">
                        {% if verse.status == 'NEW' %}
                            This verse has not been processed yet
                        {% elif verse.status == 'IN_PROGRESS' %}
                            This verse is currently being worked on
                        {% elif verse.status == 'COMPLETED' %}
                            This verse has been completed
                        {% else %}
                            This verse has been reviewed
                        {% endif %}
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

├── tests.py
  Content:
from django.test import TestCase

# Create your tests here.


├── urls.py
  Content:
from django.urls import path
from . import views

app_name = "project_manager"

urlpatterns = [
    path("", views.ProjectListView.as_view(), name="project_list"),
    path("create/", views.ProjectCreateView.as_view(), name="project_create"),
    path("<int:pk>/", views.ProjectDetailView.as_view(), name="project_detail"),
    path(
        "document/<int:pk>/", views.DocumentDetailView.as_view(), name="document_detail"
    ),
    path("verse/<int:pk>/", views.VerseDetailView.as_view(), name="verse_detail"),
    path(
        "verse/<int:pk>/status/",
        views.VerseStatusUpdateView.as_view(),
        name="verse_status_update",
    ),
]


├── utils.py
  Content:
# project_manager/utils.py
from typing import List, Dict
from io import TextIOWrapper

from django.core.files.uploadedfile import UploadedFile
from .models import Document, Verse
import regex as re
from .ar_data import set_ar_dia, list_ar_alpha


def process_uploaded_file(document: Document) -> List[Dict]:
    """Process the uploaded file and split it into verses."""
    verses = []
    try:
        with document.file.open("rb") as file:
            text_file = TextIOWrapper(file, encoding="utf-8")
            content = text_file.read()

        # Split into verses (by lines, removing empty ones)
        lines = [line.strip() for line in content.split("\n") if line.strip()]

        # Create verse data
        for position, line in enumerate(lines, 1):
            verses.append({"content": line, "position": position, "document": document})

    except Exception as e:
        raise ValueError(f"Error processing file: {str(e)}")

    return verses


def create_verses_from_data(verses_data: List[Dict]) -> List[Verse]:
    """Create Verse objects from processed data."""
    return [Verse.objects.create(**verse_data) for verse_data in verses_data]


def get_file_size_kb(file: UploadedFile) -> int:
    """Get file size in KB."""
    return file.size // 1024


def split_arabic_text(word: str, set_ar_dia: set = set_ar_dia) -> list[tuple[str, str]]:
    """Split Arabic word into (character, diacritics) tuples."""
    pattern_dia = f'[{"".join(set_ar_dia)}]*'
    pattern_non_dia = f'[^{"".join(set_ar_dia)}]'
    pattern = f"{pattern_non_dia}{pattern_dia}"
    matches = re.findall(pattern, word)
    return [(item[0], item[1:]) if len(item) > 1 else (item[0], "") for item in matches]


def create_char_span(char: str, char_idx: int, global_dia_idx: int) -> str:
    """Create HTML span for a character."""
    return (
        f'<span data-char-idx="{char_idx}" '
        f'data-global-char-idx="{global_dia_idx}" '
        f'class="char">{char}</span>'
    )


def create_dia_span(diacritics: str, char_idx: int, global_dia_idx: int) -> str:
    """Create HTML span for diacritics."""
    return (
        f'<span data-dia-idx="{char_idx}" '
        f'data-global-dia-idx="{global_dia_idx}" '
        f'data-dia="{diacritics}" '
        f'class="char"></span>'
    )


def create_word_span(html_chars: list[str], wd_idx: int) -> str:
    """Create HTML span for a word."""
    return f'<span data-wd-idx="{wd_idx}" ' f'class="word">{"".join(html_chars)}</span>'


def char_has_dia(char, dia, mode):
    if mode == "train" and char in list_ar_alpha and dia:
        return True
    elif mode == "dicr" and char in list_ar_alpha:
        return True
    else:
        return False


def text_to_html_spans(text, mode="dicr"):
    if mode not in ["dicr", "train"]:
        raise ValueError("Mode must be either 'dicr' or 'train'")

    list_words = text.split()
    tokens_count = len(list_words)
    html_content = []
    global_dia_idx = 0
    wd_dict = {}
    char_dict_global = {}
    char_dict_local = {}

    for wd_idx, word in enumerate(list_words):
        list_chars_span = split_arabic_text(word)

        # This is the only difference between train and dic modes
        if mode == "train":
            wd_dia_count = len([i for i in list_chars_span if i[1]])
        else:  # dicr mode
            wd_dia_count = len([i for i in list_chars_span if i[0] in list_ar_alpha])

        html_chars = []
        is_word = wd_dia_count > 0

        wd_dict[wd_idx] = {"isWord": is_word, "wordDiaCount": wd_dia_count}

        char_idx = 0
        for char, diacritics in list_chars_span:
            char_is_alpha = char in list_ar_alpha
            has_dia = char_has_dia(char, diacritics, mode)

            if char_is_alpha and has_dia:
                char_span = create_char_span(char, char_idx, global_dia_idx)
                dia_span = create_dia_span(diacritics, char_idx, global_dia_idx)

                char_data = {
                    "char": char,
                    "dia": diacritics,
                    "in_word": is_word,
                    "has_dia": True,
                    "wd_idx": wd_idx,
                    "local_char_idx": char_idx,
                    "global_dia_idx": global_dia_idx,
                }

                char_dict_global[global_dia_idx] = char_data
                char_dict_local[f"{wd_idx}_{char_idx}"] = char_data

                html_chars.append(char_span + dia_span)
                char_idx += 1
                global_dia_idx += 1
            else:
                html_chars.append(f'<span class="char">{char}</span>')

        word_span = create_word_span(html_chars, wd_idx)
        html_content.append(word_span)
        total_diacritics = global_dia_idx

    return (
        " ".join(html_content),
        tokens_count,
        total_diacritics,
        wd_dict,
        char_dict_global,
        char_dict_local,
    )


├── views.py
  Content:
from django.views.generic import ListView, CreateView, DetailView, View
from django.contrib import messages
from django.shortcuts import get_object_or_404, redirect
from django.urls import reverse_lazy
from django.http import HttpResponse, HttpResponseBadRequest
from django.contrib.messages.views import SuccessMessageMixin

from .models import Project, Document, Verse
from .forms import ProjectForm, DocumentUploadForm
from .utils import process_uploaded_file, create_verses_from_data


class ProjectListView(ListView):
    model = Project
    template_name = "project_manager/project_list.html"
    context_object_name = "projects"

    def get_queryset(self):
        return Project.objects.filter(is_active=True)


class ProjectCreateView(SuccessMessageMixin, CreateView):
    model = Project
    form_class = ProjectForm
    template_name = "project_manager/project_form.html"
    success_message = "Project created successfully."

    def get_success_url(self):
        return reverse_lazy(
            "project_manager:project_detail", kwargs={"pk": self.object.pk}
        )

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["title"] = "Create Project"
        return context


class ProjectDetailView(DetailView):
    model = Project
    template_name = "project_manager/project_detail.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["documents"] = self.object.documents.all()
        context["form"] = DocumentUploadForm()
        return context

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()
        form = DocumentUploadForm(request.POST, request.FILES)

        if form.is_valid():
            document = form.save(commit=False)
            document.project = self.object
            document.file_size = form.cleaned_data["file"].size // 1024
            document.save()

            try:
                verses_data = process_uploaded_file(document)
                create_verses_from_data(verses_data)
                messages.success(
                    request, "Document uploaded and processed successfully."
                )
                return redirect("project_manager:project_detail", pk=self.object.pk)
            except Exception as e:
                document.delete()
                messages.error(request, str(e))
                return self.render_to_response(self.get_context_data(form=form))

        return self.render_to_response(self.get_context_data(form=form))


class DocumentDetailView(DetailView):
    model = Document
    template_name = "project_manager/document_detail.html"
    context_object_name = "document"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["verses"] = self.object.verses.all()
        return context


class VerseDetailView(DetailView):
    model = Verse
    template_name = "project_manager/verse_detail.html"
    context_object_name = "verse"


class VerseStatusUpdateView(View):
    def post(self, request, pk):
        verse = get_object_or_404(Verse, pk=pk)
        new_status = request.POST.get("status")

        if new_status in dict(Verse.Status.choices):
            verse.status = new_status
            verse.save()
            return HttpResponse(verse.get_status_display())

        return HttpResponseBadRequest("Invalid status")



├── db.sqlite3
  Content:


└── diacriticizer/
  ├── __init__.py
    Content:


  ├── __pycache__ [Ignored]
  ├── admin.py
    Content:
from django.contrib import admin

# Register your models here.


  ├── apps.py
    Content:
from django.apps import AppConfig


class DiacriticizerConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'diacriticizer'


  └── migrations/
    ├── __init__.py
      Content:


    ├── __pycache__ [Ignored]
  ├── models.py
    Content:
from django.db import models

# Create your models here.


  └── templates/
    └── diacriticizer/
      ├── index.html
        Content:
{% extends 'base.html' %} {% block page_title %} Page Title Comes Here
{%endblock page_title %} {% block content %}
<main dir="rtl">
  <div class="container" x-data="sentHook" tabindex="0">
    <div data-tokens-count="{{tokens_count}}" class="verse">
      {{ verse | safe}}
    </div>
    <div class="diacritics"><p><span>الحركة: </span><span x-text="currentDia"></span></p></div>
  </div>
</main>
{% endblock content %}


  ├── tests.py
    Content:
from django.test import TestCase

# Create your tests here.


  ├── urls.py
    Content:
from django.urls import path

from . import views

urlpatterns = [path("", views.index, name="index")]


  ├── utils.py
    Content:
ar_alpha =['ء',
 'آ',
 'أ',
 'ؤ',
 'إ',
 'ئ',
 'ا',
 'ب',
 'ة',
 'ت',
 'ث',
 'ج',
 'ح',
 'خ',
 'د',
 'ذ',
 'ر',
 'ز',
 'س',
 'ش',
 'ص',
 'ض',
 'ط',
 'ظ',
 'ع',
 'غ',
 'ف',
 'ق',
 'ك',
 'ل',
 'م',
 'ن',
 'ه',
 'و',
 'ى',
 'ي']

verse = '''
إن الذي ســـمـــك السماء، بنى لنا ... بيتا: دعائمه أعز وأطول
'''.strip()


def text_to_html_spans(text: str) -> str:
   """Convert text to HTML with word and character spans."""
   list_words = text.split()
   tokens_count = len(list_words)
   html_content = []

#    char_counter = 0
   list_words =  [(idx, word) for (idx, word) in enumerate(list_words)]

   for (wd_idx, word) in list_words:
       html_chars = []
       word_len = len([i for i in word if i in ar_alpha])
       is_word = "true"
       is_word = "false" if word_len == 0 else is_word
       char_idx = -1
       for char in word:
           char_is_alpha = char in ar_alpha
           char_idx = char_idx + 1 if char_is_alpha else char_idx
           idx_attr = f'data-char-idx="{char_idx}"' if char_is_alpha else ''
           idx_attr_dia = f'data-dia-idx={char_idx}' if char_is_alpha else ''
           
           html_chars.append(f'<span {idx_attr}class="char">{char}</span><span {idx_attr_dia} class="dia"></span>')

           
       html_word = f'<span class="word" data-is-word="{is_word}" data-wd-idx="{wd_idx}" data-wd-len="{word_len}">{"".join(html_chars)}</span>'
       html_content.append(html_word)
   html_content = " ".join(html_content)
   return html_content, tokens_count



  ├── views.py
    Content:
from django.shortcuts import render

# Create your views here.
from .utils import text_to_html_spans, verse

verse_html, tokens_count = text_to_html_spans(verse)


def index(request):
    return render(
        request,
        "diacriticizer/index.html",
        {"verse": verse_html, "tokens_count": tokens_count},
    )


├── manage.py
  Content:
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


└── my_project/
  ├── __init__.py
    Content:


  ├── __pycache__ [Ignored]
  ├── asgi.py
    Content:
"""
ASGI config for my_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_project.settings')

application = get_asgi_application()


  ├── settings.py
    Content:
"""
Django settings for my_project project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dh-@!k*3u_+2s*c3n51)5%6(f4*ajb))8d9f!8do7iyh67u$!+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'diacriticizer',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_browser_reload',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
        "django_browser_reload.middleware.BrowserReloadMiddleware",

]

ROOT_URLCONF = 'my_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'my_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Add this to disable caching during development
if DEBUG:
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'



  ├── urls.py
    Content:
"""
URL configuration for my_project project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("", include("diacriticizer.urls")),
    path("diacriticizer/", include("diacriticizer.urls")),
    path("admin/", admin.site.urls),
    path("__reload__/", include("django_browser_reload.urls")),
]


  ├── wsgi.py
    Content:
"""
WSGI config for my_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_project.settings')

application = get_wsgi_application()


└── static/
  ├── app.js
    Content:
// app.js
import Alpine from "./node_modules/alpinejs/dist/module.esm.js";
import {
  wordNavigator,
  charNavigator,
  logEvent,
  fatha,
  addDia,
} from "./utils.js";
import { setupHotkeys } from "./hotkeys.js";

window.Alpine = Alpine;
window.logEvent = logEvent;

document.addEventListener("alpine:init", () => {
  Alpine.data("sentHook", () => ({
    wordIndex: -1,
    charIndex: -1,
    currentDia: "",

    init() {
      setupHotkeys({
        wordNavigator: () => this.wordNavigator(),
        charNavigator: () => this.charNavigator(),
        fatha: () => this.fatha(),
        addDia: () => this.addDia(),
      });

      this.tokensCount = parseInt(
        document.querySelector(".verse").getAttribute("data-tokens-count")
      );

      this.$watch("wordIndex", (value, oldValue) => {
        console.table({
          wordIndex: this.wordIndex,
          tokensCount: this.tokensCount,
        });
      });
    },

    wordNavigator() {
      wordNavigator(this);
    },

    charNavigator() {
      charNavigator(this);
    },

    fatha() {
      fatha(this);
    },
    addDia() {
      addDia(this, event);
    },
  }));
});

Alpine.start();


  ├── data.js
    Content:
export const ar_alpha = [
  "ء",
  "آ",
  "أ",
  "ؤ",
  "إ",
  "ئ",
  "ا",
  "ب",
  "ة",
  "ت",
  "ث",
  "ج",
  "ح",
  "خ",
  "د",
  "ذ",
  "ر",
  "ز",
  "س",
  "ش",
  "ص",
  "ض",
  "ط",
  "ظ",
  "ع",
  "غ",
  "ف",
  "ق",
  "ك",
  "ل",
  "م",
  "ن",
  "ه",
  "و",
  "ى",
  "ي",
];

export const DIACRITICS_CONFIG = {
  // Basic diacritics (number keys)
  num_1: { char: "َ", name: "fatha" },
  num_2: { char: "ِ", name: "kasra" },
  num_3: { char: "ُ", name: "damma" },
  num_4: { char: "ً", name: "tan_fatha" },
  num_5: { char: "ٍ", name: "tan_kasra" },
  num_6: { char: "ٌ", name: "tan_damma" },
  num_7: { char: "ّ", name: "shadda" },
  num_9: { char: "ْ", name: "sukun" },

  // Shadda combinations (ctrl + number keys)
  "ctrl+num_1": { char: "َّ", name: "shad_fatha" },
  "ctrl+num_2": { char: "ِّ", name: "shad_kasra" },
  "ctrl+num_3": { char: "ُّ", name: "shad_damma" },
  "ctrl+num_4": { char: "ًّ", name: "shad_tan_fatha" },
  "ctrl+num_5": { char: "ٍّ", name: "shad_tan_kasra" },
  "ctrl+num_6": { char: "ٌّ", name: "shad_tan_damma" },
};


  ├── hotkeys.js
    Content:
// hotkeys.js
import "./node_modules/hotkeys-js/dist/hotkeys.min.js"; // Import the script
import { DIACRITICS_CONFIG } from "./data.js";
const hotkeys = window.hotkeys; // Use the global variable

export function setupHotkeys(appFunctions) {
  // Word and character navigation
  hotkeys("ctrl+space", function (event) {
    event.preventDefault();
    appFunctions.wordNavigator();
  });

  hotkeys("space", function (event) {
    event.preventDefault();
    appFunctions.charNavigator();
  });

  // Set up diacritics hotkeys
  hotkeys("f", function (event) {
    event.preventDefault();
    appFunctions.fatha();
  });

  // Set up diacritics hotkeys
  Object.entries(DIACRITICS_CONFIG).forEach(([key, value]) => {
    hotkeys(key, function (event) {
      event.preventDefault();
      appFunctions.addDia();
    });
  });
}


  ├── keyboard_guide.md
    Content:
### Designing Web Apps for Multilingual Keyboard Shortcut Support (Arabic and English)

When designing web apps that use keyboard shortcuts extensively, and where users may frequently switch between Arabic and English keyboard layouts, it’s important to create a robust system that minimizes confusion and ensures a seamless user experience. Here’s a step-by-step guide to address this challenge:

---

#### 1. **Understand the Core Issue**
- Arabic and English layouts map some keys to different characters, which can lead to shortcuts behaving unexpectedly when the language is switched.
- For example, `Ctrl + Z` in English may become `Ctrl + ي` in Arabic.
- Users might accidentally switch layouts via shortcuts (`Alt + Shift`) and not realize it, causing unintended results.

---

#### 2. **Design Principles for Shortcut Detection**
- **Detect Key Codes (`event.code`) for Consistency:**
  - Use `event.code` rather than `event.key` to ensure that the shortcut is tied to the physical key position rather than the character it represents.
  - Example: The key below the `ESC` key should always be recognized as the same shortcut, regardless of the layout.

- **Offer Contextual Feedback:**
  - Provide real-time feedback when a shortcut is pressed.
  - Example: Display a tooltip or small banner showing the detected shortcut (`Ctrl + Z`), so users know it was recognized correctly.

---

#### 3. **Implementing Multilingual Shortcuts**
- **Support Both Layouts:**
  - Allow the app to recognize both Arabic and English versions of the same shortcut if using `event.key`.
  - Example: Map both `Ctrl + Z` (English) and `Ctrl + ز` (Arabic) to the undo action.

- **Normalize Inputs:**
  - Create a mapping table to translate Arabic keyboard inputs to their English equivalents for shortcuts.
  - Example:
    ```javascript
    const shortcutMap = {
      'ز': 'z', // Arabic ز (Z sound) maps to English 'z'
      'ي': 'y', // Arabic ي (Y sound) maps to English 'y'
      // Add other mappings as needed
    };

    function normalizeKey(key) {
      return shortcutMap[key] || key;
    }

    document.addEventListener('keydown', (event) => {
      const normalizedKey = normalizeKey(event.key);
      console.log(`Normalized Key: ${normalizedKey}`);
      // Handle shortcuts here
    });
    ```

---

#### 4. **Prevent Layout-Specific Shortcuts**
- **Use Modifier Keys for Robustness:**
  - Ensure shortcuts include modifiers (e.g., `Ctrl`, `Alt`, `Shift`) to minimize accidental overlaps with regular typing.
  - Example: Use `Ctrl + Shift + Z` instead of `Ctrl + Z` to reduce conflicts.

- **Avoid Single-Key Shortcuts:**
  - Single-key shortcuts (e.g., `Z` alone) are highly prone to conflicts with text input, especially when switching languages.

---

#### 5. **Test Across Layouts**
- **Simulate Different Scenarios:**
  - Test the app with users who frequently switch between Arabic and English.
  - Validate that all shortcuts work as intended in both layouts.

- **Handle Edge Cases:**
  - Consider what happens if the layout is switched mid-operation or if the shortcut includes characters absent in one layout.

---

#### 6. **Provide User Configuration Options**
- **Customizable Shortcuts:**
  - Allow users to customize shortcuts based on their preferred layout.
  - Save these preferences in local storage or a database.

- **Shortcut Layout Indicator:**
  - Show the current keyboard layout near the shortcut list in settings.
  - Example: Display “Ctrl + Z” (English) or “Ctrl + ز” (Arabic) dynamically based on the detected layout.

---

#### 7. **Educate Users**
- **Shortcut Guides:**
  - Provide a guide or overlay explaining shortcuts and their equivalents in both Arabic and English layouts.
  - Example: A help section listing both versions of each shortcut.

- **Warn About Layout Switching:**
  - Notify users if frequent layout switching is detected, and suggest best practices (e.g., stick to one layout for shortcuts).

---

#### 8. **Leverage Browser Features and APIs**
- **Detect Current Language:**
  - Use JavaScript to detect the current keyboard layout (if possible) and adjust shortcuts dynamically.
  - Example using `Intl`:
    ```javascript
    const language = navigator.language || navigator.userLanguage;
    console.log(`Current Language: ${language}`);
    ```

- **Use Input Method Events:**
  - Leverage browser events like `oninput` or `inputmethodchange` to detect when the layout changes.

---

#### 9. **Fallback Mechanisms**
- **Log and Learn:**
  - Log unrecognized shortcuts to identify patterns and improve support for multilingual users.

- **Reset Option:**
  - Provide a way to reset shortcuts to their default behavior if users experience issues.

---

### Example Code for Robust Shortcut Handling
Here’s a practical example to combine the above principles:

```javascript
const shortcutMap = {
  'z': 'undo',
  'ز': 'undo', // Arabic ز
  'y': 'redo',
  'ي': 'redo', // Arabic ي
};

document.addEventListener('keydown', (event) => {
  const action = shortcutMap[event.key];
  if (action) {
    event.preventDefault();
    console.log(`Action triggered: ${action}`);
    // Perform the action (e.g., undo, redo)
  }
});
```

---

### Summary
By combining detection (`event.code`), normalization (`event.key` remapping), and user-friendly features (customizable shortcuts and feedback), you can create web apps that work seamlessly for users switching between Arabic and English layouts. Thorough testing and user education will ensure a polished experience.



  ├── map_funcs.js
    Content:
// Define your shortcuts map
const shortcuts = {
    'ctrl+p': function() { /* print logic */ },
    'shift+/': function() { /* show shortcuts */ },
    'alt+s': function() { /* save changes */ }
};

// In your Alpine component
{
    shortcuts,
    handleKeyPress(event) {
        const key = [
            event.ctrlKey ? 'ctrl+' : '',
            event.shiftKey ? 'shift+' : '',
            event.altKey ? 'alt+' : '',
            event.key.toLowerCase()
        ].join('');

        if (this.shortcuts[key]) {
            event.preventDefault();
            this.shortcuts[key]();
        }
    }
}

  ├── node_modules [Ignored]
  ├── package-lock.json
    Content:
{
  "name": "static",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "dependencies": {
        "alpinejs": "^3.14.8",
        "hotkeys-js": "^3.13.9"
      }
    },
    "node_modules/@vue/reactivity": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/@vue/reactivity/-/reactivity-3.1.5.tgz",
      "integrity": "sha512-1tdfLmNjWG6t/CsPldh+foumYFo3cpyCHgBYQ34ylaMsJ+SNHQ1kApMIa8jN+i593zQuaw3AdWH0nJTARzCFhg==",
      "dependencies": {
        "@vue/shared": "3.1.5"
      }
    },
    "node_modules/@vue/shared": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/@vue/shared/-/shared-3.1.5.tgz",
      "integrity": "sha512-oJ4F3TnvpXaQwZJNF3ZK+kLPHKarDmJjJ6jyzVNDKH9md1dptjC7lWR//jrGuLdek/U6iltWxqAnYOu8gCiOvA=="
    },
    "node_modules/alpinejs": {
      "version": "3.14.8",
      "resolved": "https://registry.npmjs.org/alpinejs/-/alpinejs-3.14.8.tgz",
      "integrity": "sha512-wT2fuP2DXpGk/jKaglwy7S/IJpm1FD+b7U6zUrhwErjoq5h27S4dxkJEXVvhbdwyPv9U+3OkUuNLkZT4h2Kfrg==",
      "dependencies": {
        "@vue/reactivity": "~3.1.1"
      }
    },
    "node_modules/hotkeys-js": {
      "version": "3.13.9",
      "resolved": "https://registry.npmjs.org/hotkeys-js/-/hotkeys-js-3.13.9.tgz",
      "integrity": "sha512-3TRCj9u9KUH6cKo25w4KIdBfdBfNRjfUwrljCLDC2XhmPDG0SjAZFcFZekpUZFmXzfYoGhFDcdx2gX/vUVtztQ==",
      "funding": {
        "url": "https://jaywcjlove.github.io/#/sponsor"
      }
    }
  }
}


  ├── package.json
    Content:
{
  "dependencies": {
    "alpinejs": "^3.14.8",
    "hotkeys-js": "^3.13.9"
  }
}


  ├── styles.css
    Content:
.container {
  max-width: 1000px;
  width: 100%;
  border-style: dashed;
  padding: 2rem 1rem;
  margin: 2rem auto;
}

.verse {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 1rem;
  padding: 1rem;
  text-align: center;
}

.word {
  font-size: 2rem;
  padding: 0.25rem;
}

.selected-word {
  background-color: burlywood;
  padding: 0.5rem;
}

.selected-char {
  background-color: aqua;
}

.diacritics span {
  font-size: 1.5rem;
  padding: 1rem;
}

.verse .word .dia {
  color: #a42d80 !important; 
}

@media (max-width: 768px) {
  .container {
    width: 90%;
    margin: 1rem auto;
  }
}


  ├── utils.js
    Content:
// utils.js
import { DIACRITICS_CONFIG } from "./data.js";


// log keyboard:
export const logEvent = () => {
  document.addEventListener("keydown", (event) => {
    const key = event.key;
    console.log(`Key pressed: ${key}`);
    console.log(event); // Changed 'e' to 'event'
  });
};

export const fatha = (state) => {
  state.currentDia = "Inserting Arabic Fatha ...";
};

export const addDia = (state, event) => {
  const wordIndex = state.wordIndex;
  const charIndex = state.charIndex;
  const wordElement = document.querySelector(`[data-wd-idx="${wordIndex}"]`);
  const diaElement = wordElement.querySelector(`[data-dia-idx="${charIndex}"]`);
  const key = recreateKey(event);
  console.log(key);
  const diaChar = DIACRITICS_CONFIG[key].char;
  diaElement.innerHTML = diaChar;
};

export const wordNavigator = (state) => {
  clearSelections();
  state.wordIndex = normalizeIndex(state.wordIndex + 1, state.tokensCount);

  selectWord(state.wordIndex);
};

export const charNavigator = (state) => {
  clearSelections();
  state.wordIndex = state.wordIndex >= 0 ? state.wordIndex : 0;
  const isWord = checkIfWord(state.wordIndex);

  if (!isWord) {
    state.wordIndex = normalizeIndex(state.wordIndex + 1, state.tokensCount);
    selectWord(state.wordIndex);
    return;
  }

  const wordLen = getWordLength(state.wordIndex);
  state.charIndex = normalizeIndex(state.charIndex + 1, wordLen);

  selectChar(state.wordIndex, state.charIndex);
};

const clearSelections = () => {
  document.querySelectorAll("span").forEach((word) => {
    word.classList.remove("selected-word", "selected-char");
  });
};

const selectWord = (wordIndex) => {
  document
    .querySelector(`[data-wd-idx="${wordIndex}"]`)
    .classList.add("selected-word");
};

const selectChar = (wordIndex, charIndex) => {
  const wordElement = document.querySelector(`[data-wd-idx="${wordIndex}"]`);
  console.log(wordElement);
  wordElement
    .querySelector(`[data-char-idx="${charIndex}"]`)
    .classList.add("selected-char");
};

const getWordLength = (wordIndex) => {
  const wordElement = document.querySelector(`[data-wd-idx="${wordIndex}"]`);
  return parseInt(wordElement.getAttribute("data-wd-len"));
};

const checkIfWord = (wordIndex) => {
  const wordElement = document.querySelector(`[data-wd-idx="${wordIndex}"]`);
  let isWord = wordElement.getAttribute("data-is-word");
  isWord = isWord === "true" ? true : false;
  return isWord;
};

const normalizeIndex = (index, maxLen) => {
  if (index >= maxLen) return 0;
  if (index < 0) return maxLen - 1;
  return index;
};

const recreateKey = (event) => {
  const ctrl = event.ctrlKey ? "ctrl+" : "";
  const num = event.key === " " ? "space" : `num_${event.key}`;
  return ctrl + num;
};


└── templates/
  ├── base.html
    Content:
{% load static %}

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <style data-merge-styles="true"></style>

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="stylesheet" href="{% static 'styles.css' %}" defer />
    <script src="{% static 'app.js' %}" type="module" defer></script>
    <script src="http://127.0.0.1:8000/__reload__/reload.js"></script>

    <title>{% block page_title %} {% endblock %}</title>
  </head>

  <body>
    {% block content %} {% endblock %}
  </body>
</html>


